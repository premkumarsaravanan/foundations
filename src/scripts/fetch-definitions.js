// @ts-ignore
require('isomorphic-fetch')
require('dotenv').config({
  path: `${__dirname}/../constants/.env`
})

const fs = require('fs')
const sw2dts = require('sw2dts')
const { exec } = require('child_process')
const loginUserSession = require('@reapit/cognito-auth').loginUserSession

const apiSchemas = [
  {
    definitionFile: `${__dirname}/../types/platform.ts`,
    endpoint: `https://dev.platform.reapit.net/docs`
  }
]

// Fetch definitions for a given schema
const fetchDefinitionsForSchema = async (schemaConfig) => {
    const { definitionFile, endpoint } = schemaConfig
    const response = await fetch(endpoint)
    if (response.status < 400) {
      const definitions = await response.json()
      // Convert definitions to TypeScript interfaces

      const convertedDefinitions = await sw2dts.convert(definitions, { withQuery: true })

      /**
       * Cooked some definition generated
       *
       * caseI: for metadata object
       *
       * ORIGINAL (generated by sw2ts):
       * [name:string]: {}
       *
       * COOKED:
       * [name:string]:any
       *
       * reason: because metadata child fields can be any type: string, number, object
       *
       */
      const cookedDefinitions = convertedDefinitions.replace(/\[name: string]: {\n\s{4}};\n/g, '[name: string]:any;\n')

      // Write interfaces to file
      fs.writeFile(definitionFile, cookedDefinitions, error => {
        if (error) {
          console.error(`Failed to write type definitions for: ${endpoint}`)
          throw error
        } else {
          console.log(`Successfully wrote type definitions for: ${endpoint}`)
        }
      })
    } else {
      // console.log(response)

      throw new Error(`Failed to fetch type definitions for: ${endpoint}`)
    }
  }

  // Fetch definitions for all schemas
;(async () => {
  Promise.all(apiSchemas.map(apiSchema => fetchDefinitionsForSchema(apiSchema))).then(() => {
    // Have tslint fixed format (tslint/prettier)
    exec('yarn lint', err => {
      if (err) throw err
      console.log('successfully formatted fetched definition file')
    })
  })
})().catch(err => {
  console.error(err)
  process.exit(1)
})
