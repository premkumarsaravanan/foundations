// @ts-ignore
require('isomorphic-fetch')

const fs = require('fs')
const sw2dts = require('sw2dts')
const { exec } = require('child_process')

const BASE_URL = 'https://dev.platform.reapit.net'

const apiSchemas = [
  {
    definitionFile: `${__dirname}/src/types/property.ts`,
    endpoint: `${BASE_URL}/properties/swagger/v1/swagger.json`,
  }, {
    definitionFile: `${__dirname}/src/types/propertyImage.ts`,
    endpoint: `${BASE_URL}/propertyImages/swagger/v1/swagger.json`,
  }
]

// Fetch definitions for a given schema
const fetchDefinitionsForSchema = async (schemaConfig, accessToken) => {
    const { definitionFile, endpoint } = schemaConfig
    const response = await fetch(endpoint, {
      headers: {
        Authorization: `Bearer ${accessToken}`
      }
    })
    if (response.status < 400) {
      const definitions = await response.json()
      // Convert definitions to TypeScript interfaces

      const convertedDefinitions = await sw2dts.convert(definitions, { withQuery: true })

      /**
       * Cooked some definition generated
       *
       * caseI: for metadata object
       *
       * ORIGINAL (generated by sw2ts):
       * [name:string]: {}
       *
       * COOKED:
       * [name:string]:any
       *
       * reason: because metadata child fields can be any type: string, number, object
       *
       */
      const cookedDefinitions = convertedDefinitions.replace(/\[name[^;]+}/g, '[name: string]:any')

      // Write interfaces to file
      fs.writeFile(definitionFile, cookedDefinitions, error => {
        if (error) {
          console.error(`Failed to write type definitions for: ${endpoint}`)
          throw error
        } else {
          console.log(`Successfully wrote type definitions for: ${endpoint}`)
        }
      })
    } else {
      // console.log(response)

      throw new Error(`Failed to fetch type definitions for: ${endpoint}`)
    }
  }

  // Fetch definitions for all schemas
;(async () => {
  const session = await fetch('https://rbsbshnxvb.execute-api.eu-west-2.amazonaws.com/dev/api/login', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      password: 'T00lb0x53',
      userName: 'plittlewood@reapit.com'
    })
  })
  const sessionJson = await session.json()
  const accessToken = sessionJson.accessToken
  Promise.all(apiSchemas.map(apiSchema => fetchDefinitionsForSchema(apiSchema, accessToken))).then(() => {
    // Have tslint fixed format (tslint/prettier)
    exec('yarn lint', err => {
      if (err) throw err
      console.log('successfully formatted fetched definition file')
    })
  })
})().catch(err => {
  console.error(err)
  process.exit(1)
})
