#import Contact, Contacts from "./resolvers/contact/types.graphql"
#import ContactIdentityCheck,ContactIdentityChecks from "./resolvers/contact-identity-check/types.graphql"
#import LoginIdentity, LoginMode, LoginType, Token from './resolvers/auth/types.graphql'
#import * from './resolvers/office/types.graphql'

type Query {
  # contact
  contact(id: String!): Contact!

  contacts(
    name: String
    address: String
    negotiatorId: [String!]
    officeId: [String!]
    active: Boolean
    pageNumber: Int
    pageSize: Int
    sortBy: String
    identityCheck: [String!]
    marketingConsent: [String!]
  ): Contacts!

  # contact-identity-check
  contactIdentityCheck(id: String!, checkId: String!): ContactIdentityCheck!

  contactIdentityChecks(id: String!, pageNumber: Int, pageSize: Int): ContactIdentityChecks!

  #office
  office(id: String!): Office!

  offices(pageSize: Int, pageNumber: Int, sortBy: String, id: [String], address: String, name: String): Offices!
}

type Mutation {
  # contact
  createContact(
    title: String
    forename: String
    surname: String
    dateOfBirth: String
    active: Boolean
    marketingConsent: String
    communications: [ContactCommunicationInput!]
    officeIds: [String!]
    negotiatorIds: [String!]
    addresses: [ContactAddressInput!]
    metadata: JSON
  ): Contact!

  updateContact(
    id: String!
    title: String
    forename: String
    surname: String
    dateOfBirth: String
    active: Boolean
    marketingConsent: String
    communications: [ContactCommunicationInput!]
    officeIds: [String!]
    negotiatorIds: [String!]
    addresses: [ContactAddressInput!]
    metadata: JSON
  ): Contact!

  # contact-identity-check
  createContactIdentityCheck(
    contactId: String!
    checkDate: String
    status: String
    negotiatorId: String
    documents: [ContactIdentityDocumentInput!]
    metadata: JSON
  ): ContactIdentityCheck!

  updateIdentityCheck(
    id: String!
    contactId: String!
    checkDate: String
    status: String
    negotiatorId: String
    documents: [ContactIdentityDocumentInput!]
    metadata: JSON
  ): ContactIdentityCheck!

  login(userName: String!, password: String!, loginType: LoginType!, mode: LoginMode!): Token

  # office
  createOffice(
    name: String
    manager: String
    address: OfficeAddressInput
    workPhone: String
    email: String
    metadata: JSON
  ): Boolean

  updateOffice(
    id: String!
    name: String
    manager: String
    address: OfficeAddressInput
    workPhone: String
    email: String
    metadata: JSON
    _eTag: String!
  ): Office!
}

scalar JSON
