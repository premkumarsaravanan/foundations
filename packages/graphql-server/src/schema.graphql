#import Contact, Contacts from "./resolvers/contact/types.graphql"
#import ContactIdentityCheck,ContactIdentityChecks from "./resolvers/contact-identity-check/types.graphql"
#import LoginIdentity, LoginMode, LoginType, Token from './resolvers/auth/types.graphql'
#import * from './resolvers/appointment/types.graphql'

type Query {
  # appointment
  getAppointments(
    pageSize: Int
    pageNumber: Int
    sortBy: String
    id: [String!]
    typeId: [String!]
    negotiatorId: [String!]
    officeId: [String!]
    propertyId: [String!]
    start: String!
    end: String!
    includeCancelled: Boolean
    includeUnconfirmed: Boolean
  ): GetAppointmentsResult!
  getAppointment(id: String!): Appointment!

  # contact
  contact(id: String!): Contact!

  contacts(
    name: String
    address: String
    negotiatorId: [String!]
    officeId: [String!]
    active: Boolean
    pageNumber: Int
    pageSize: Int
    sortBy: String
    identityCheck: [String!]
    marketingConsent: [String!]
  ): Contacts!

  # contact-identity-check
  contactIdentityCheck(id: String!, checkId: String!): ContactIdentityCheck!

  contactIdentityChecks(id: String!, pageNumber: Int, pageSize: Int): ContactIdentityChecks!
}

type Mutation {
  # appointment
  createAppointment(
    start: String!
    end: String!
    followUpOn: String
    typeId: String!
    description: String
    organiserId: String
    negotiatorIds: [String!]!
    officeIds: [String!]!
    attendee: CreateAppointmentInputAttendee
    propertyId: String
    accompanied: Boolean
    negotiatorConfirmed: Boolean
    attendeeConfirmed: Boolean
    propertyConfirmed: Boolean
    recurrence: CreateAppointmentInputRecurrence
    metadata: JSON
  ): Boolean

  updateAppointment(
    id: String!
    start: String
    end: String
    followUpOn: String
    typeId: String
    description: String
    propertyId: String
    organiserId: String
    cancelled: Boolean
    negotiatorIds: [String!]
    officeIds: [String!]
    attendee: UpdateAppointmentInputAttendee
    accompanied: Boolean
    negotiatorConfirmed: Boolean
    attendeeConfirmed: Boolean
    propertyConfirmed: Boolean
    followUp: UpdateAppointmentInputFollowUp
    recurrence: UpdateAppointmentInputRecurrence
    metadata: JSON,
    _eTag: String!
  ): Appointment

  # contact
  createContact(
    title: String
    forename: String
    surname: String
    dateOfBirth: String
    active: Boolean
    marketingConsent: String
    communications: [ContactCommunicationInput!]
    officeIds: [String!]
    negotiatorIds: [String!]
    addresses: [ContactAddressInput!]
    metadata: JSON
  ): Contact!

  updateContact(
    id: String!
    title: String
    forename: String
    surname: String
    dateOfBirth: String
    active: Boolean
    marketingConsent: String
    communications: [ContactCommunicationInput!]
    officeIds: [String!]
    negotiatorIds: [String!]
    addresses: [ContactAddressInput!]
    metadata: JSON
  ): Contact!

  # contact-identity-check
  createContactIdentityCheck(
    contactId: String!
    checkDate: String
    status: String
    negotiatorId: String
    documents: [ContactIdentityDocumentInput!]
    metadata: JSON
  ): ContactIdentityCheck!

  updateIdentityCheck(
    id: String!
    contactId: String!
    checkDate: String
    status: String
    negotiatorId: String
    documents: [ContactIdentityDocumentInput!]
    metadata: JSON
  ): ContactIdentityCheck!

  login(userName: String!, password: String!, loginType: LoginType!, mode: LoginMode!): Token
}

scalar JSON
