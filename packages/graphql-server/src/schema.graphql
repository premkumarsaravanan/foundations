#import Contact, Contacts from "./resolvers/contact/types.graphql"
#import ContactIdentityCheck,ContactIdentityChecks from "./resolvers/contact-identity-check/types.graphql"
#import LoginIdentity, LoginMode, LoginType, Token from './resolvers/auth/types.graphql'

type Query {
  # contact
  getContact(
    id: String!,
  ): Contact!

  getContacts(
    name: String,
    address: String,
    negotiatorId: [String!],
    officeId: [String!],
    active: Boolean,
    pageNumber: Int,
    pageSize: Int,
    sortBy: String,
    identityCheck: [String!],
    marketingConsent: [String!],
    createdFrom: String,
    createdTo: String,
  ): Contacts!

  # contact-identity-check
  contactIdentityCheck(
    id: String!,
    checkId: String!,
  ): ContactIdentityCheck!

  contactIdentityChecks(
    id: String!,
    pageNumber: Int,
    pageSize: Int,
  ): ContactIdentityChecks!

}

type Mutation {
  # The response of createContact will temporarily be boolean type until BE team fixs the API
  createContact(
    title: String,
    forename: String,
    surname: String!,
    dateOfBirth: String,
    active: Boolean,
    marketingConsent: String!,
    source: ContactSourceInput,
    homePhone: String,
    workPhone: String,
    mobilePhone: String,
    email: String,
    officeIds: [String!]!,
    negotiatorIds: [String!]!,
    primaryAddress: ContactAddressInput!,
    secondaryAddress: ContactAddressInput,
    workAddress: ContactAddressInput,
    metadata: JSON,
  ): Boolean

  updateContact(
    id: String!,
    title: String,
    forename: String,
    surname: String!,
    dateOfBirth: String,
    active: Boolean,
    marketingConsent: String!,
    source: ContactSourceInput,
    homePhone: String,
    workPhone: String,
    mobilePhone: String,
    email: String,
    officeIds: [String!]!,
    negotiatorIds: [String!]!,
    primaryAddress: ContactAddressInput!,
    secondaryAddress: ContactAddressInput,
    workAddress: ContactAddressInput,
    metadata: JSON,
    _eTag: String!,
  ): Contact!

  # contact-identity-check
  createContactIdentityCheck(
    contactId: String!,
    checkDate: String,
    status: String,
    negotiatorId: String,
    documents: [ContactIdentityDocumentInput!],
    metadata: JSON,
  ): ContactIdentityCheck!

  updateIdentityCheck(
    id: String!,
    contactId: String!,
    checkDate: String,
    status: String,
    negotiatorId: String,
    documents: [ContactIdentityDocumentInput!],
    metadata: JSON,
  ): ContactIdentityCheck!

  login(
    userName: String!,
    password: String!,
    loginType: LoginType!,
    mode: LoginMode!,
  ): Token
}

scalar JSON
